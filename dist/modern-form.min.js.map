{"version":3,"sources":["modern-form.js"],"names":["extendDefaults","source","properties","property","hasOwnProperty","build","list","slice","call","this","input","plugin","forEach","element","value","parentNode","classList","add","options","classHasContent","addEventListener","inputFocus","bind","inputBlur","ModernForm","defaults","inputSelector","classHasFocus","form","arguments","prototype","init","querySelectorAll"],"mappings":";;;;;;CAMA,WA8CC,QAASA,GAAeC,EAAQC,GAC/B,GAAIC,EAEJ,KAAKA,IAAYD,GACZA,EAAWE,eAAeD,KAC7BF,EAAOE,GAAYD,EAAWC,GAIhC,OAAOF,GAQR,QAASI,KACR,GAAIC,MAAUC,MAAMC,KAAKC,KAAKC,OAC1BC,EAASF,IAEbH,GAAKM,QAAQ,SAASC,GACjB,KAAOA,EAAQC,OAClBD,EAAQE,WAAWC,UAAUC,IAAIN,EAAOO,QAAQC,iBAG7CN,IACHA,EAAQO,iBAAiB,QAAST,EAAOU,WAAWC,MAAMT,QAASA,EAASF,OAAQA,KACpFE,EAAQO,iBAAiB,OAAQT,EAAOY,UAAUD,MAAMT,QAASA,EAASF,OAAQA,QAxErFF,KAAKe,WAAa,WACjB,GAAIC,IACHC,cAAe,cACfC,cAAe,wBACfR,gBAAiB,0BAGlBV,MAAKmB,KAAO,KACZnB,KAAKC,MAAQ,KACbD,KAAKS,QAAUlB,EAAeyB,EAAUI,UAAU,KAOnDL,WAAWM,UAAUC,KAAO,SAASlB,GACpCJ,KAAKmB,KAAOf,EACZJ,KAAKC,MAAQG,EAAQmB,iBAAiBvB,KAAKS,QAAQQ,eAEnDrB,EAAMG,KAAKC","file":"modern-form.min.js","sourcesContent":["/*!\r\n * A simple handler for forms that add classes on your forms, so you can play with CSS.\r\n * Version : 1.0.0\r\n * Emmanuel B. (www.emmanuelbeziat.com)\r\n * https://github.com/EmmanuelBeziat/js-modern-form\r\n **/\r\n(function() {\r\n\r\n\tthis.ModernForm = function() {\r\n\t\tvar defaults = {\r\n\t\t\tinputSelector: '.form-input',\r\n\t\t\tclassHasFocus: 'form-group--has-focus',\r\n\t\t\tclassHasContent: 'form-group--has-content'\r\n\t\t};\r\n\r\n\t\tthis.form = null;\r\n\t\tthis.input = null;\r\n\t\tthis.options = extendDefaults(defaults, arguments[0]);\r\n\t}\r\n\r\n\t/**\r\n\t * Main functino called by the plugin\r\n\t * @param  {DOM object} element [The form to be set with the plugin]\r\n\t */\r\n\tModernForm.prototype.init = function(element) {\r\n\t\tthis.form = element;\r\n\t\tthis.input = element.querySelectorAll(this.options.inputSelector);\r\n\r\n\t\tbuild.call(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Add classes on the input when user gets in it\r\n\t */\r\n\tfunction inputFocus() {\r\n\t\tthis.element.parentNode.classList.add(this.plugin.options.classHasFocus, this.plugin.options.classHasContent);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove classes on the input when user leave it\r\n\t */\r\n\tfunction inputBlur() {\r\n\t\tif ('' === this.element.value) {\r\n\t\t\tthis.element.parentNode.classList.remove(this.plugin.options.classHasContent);\r\n\t\t}\r\n\r\n\t\tthis.element.parentNode.classList.remove(this.plugin.options.classHasFocus);\r\n\t}\r\n\r\n\t/**\r\n\t * Extend defaults properties with user options\r\n\t */\r\n\tfunction extendDefaults(source, properties) {\r\n\t\tvar property;\r\n\r\n\t\tfor (property in properties) {\r\n\t\t\tif (properties.hasOwnProperty(property)) {\r\n\t\t\t\tsource[property] = properties[property];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn source;\r\n\t}\r\n\r\n\t/**\r\n\t * Main build function\r\n\t * 1. Add the content class when loading, if the input's value is already defined\r\n\t * 2. Fire events when focus and blur happen\r\n\t */\r\n\tfunction build() {\r\n\t\tvar list = [].slice.call(this.input);\r\n\t\tvar plugin = this;\r\n\r\n\t\tlist.forEach(function(element) {\r\n\t\t\tif ('' !== element.value) {\r\n\t\t\t\telement.parentNode.classList.add(plugin.options.classHasContent); // [1]\r\n\t\t\t}\r\n\r\n\t\t\tif (element) {\r\n\t\t\t\telement.addEventListener('focus', plugin.inputFocus.bind({element: element, plugin: plugin})); // [2]\r\n\t\t\t\telement.addEventListener('blur', plugin.inputBlur.bind({element: element, plugin: plugin})); // [2]\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}